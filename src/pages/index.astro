---
export const prerender = false;
import { buttonVariants } from "@/components/ui/button";
import Layout from "../layouts/Layout.astro";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";

// Environment variable handling for both prod and dev
let SITE_URL;
if (import.meta.env.PROD) {
  // Production environment
  const { env } = Astro.locals.runtime;
  SITE_URL = env.SITE_URL;
} else {
  // Development environment
  SITE_URL = import.meta.env.SITE_URL;
}

// Fetch channels data
const request = await fetch(`${SITE_URL}/api/canales`);
const canales = await request.json();
---

<Layout>
  <div class="container mx-auto py-8 px-4 md:px-8">
    <div class="flex flex-col gap-3 mb-6">
      <div class="flex flex-wrap justify-between items-center gap-4">
        <h1 class="text-3xl font-bold text-foreground">Lista de canales</h1>
        <div class="flex items-center gap-4">
          <Badge variant="secondary">
            {canales.data.length} canales disponibles
          </Badge>
          <a href="/informacion">
            <Badge variant="secondary"> Información </Badge>
          </a>
        </div>
      </div>
      <div class="flex items-center gap-4 mt-2">
        <button
          id="copyIptvButton"
          type="button"
          class={buttonVariants({ variant: "outline", size: "sm" })}
          aria-label="Copiar enlace de lista IPTV"
        >
          Lista IPTV
        </button>
        <button
          id="copyXmltvButton"
          type="button"
          class={buttonVariants({ variant: "outline", size: "sm" })}
          aria-label="Copiar enlace de guía XMLTV"
        >
          Guia XMLTV
        </button>
      </div>
    </div>

    <!-- Search bar -->
    <div class="w-full max-w-md">
      <div class="relative">
        <Input
          type="text"
          id="channelSearch"
          placeholder="Buscar por nombre de canal..."
          class="w-full pr-10"
          aria-label="Buscar canal por nombre"
        />
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5 absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground pointer-events-none"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
          aria-hidden="true"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </div>
    </div>

    <!-- Responsive grid layout -->
    <div
      id="channelsGrid"
      class="grid grid-cols-1 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-2 gap-4 mt-6"
    >
      {
        canales.data.map((channel: any) => (
          <div
            class="channel-card bg-card text-card-foreground rounded-lg border-y-[1px] border-x-[1px] shadow-sm hover:shadow transition-shadow duration-200 overflow-hidden"
            data-channel-name={
              channel.titles?.ES?.toLowerCase() ||
              channel.titles?.EN?.toLowerCase() ||
              ""
            }
          >
            <div class="flex p-4 w-full">
              <div class="flex-shrink-0 mr-4">
                <div class="w-16 h-16 rounded-md overflow-hidden bg-muted flex items-center justify-center">
                  <img
                    class="w-full h-full object-contain"
                    src={`${channel.logoUrl}`}
                    alt={
                      channel.titles?.ES ||
                      channel.titles?.EN ||
                      "Logo del canal"
                    }
                    loading="lazy"
                    onerror="this.onerror=null; this.src='/placeholder-channel.svg';"
                  />
                </div>
              </div>

              <div class="flex-grow flex flex-col">
                <div class="flex items-center mb-2">
                  <Badge className="mr-2">{channel.number}</Badge>
                  <h2 class="text-lg font-medium text-card-foreground">
                    {((name) =>
                      name
                        ? name
                            .replace(/\bHD\b/gi, "")
                            .replace(
                              !name.toUpperCase().startsWith("TV")
                                ? /\bTV\b/gi
                                : "",
                              ""
                            )
                            .replace(/\s+/g, " ")
                            .trim()
                        : "")(channel.titles?.ES || channel.titles?.EN)}
                  </h2>
                </div>

                <div class="mt-auto">
                  <a
                    href={`/ver/${channel.number}`}
                    class={buttonVariants({ variant: "default", size: "sm" })}
                  >
                    Ver Ahora
                  </a>
                </div>
              </div>
            </div>
          </div>
        ))
      }
    </div>

    <!-- No results message -->
    <div id="noResults" class="hidden text-center py-8 text-muted-foreground">
      No se encontraron canales que coincidan con tu búsqueda.
    </div>
  </div>
</Layout>

<script define:vars={{ SITE_URL }}>
  document.addEventListener("DOMContentLoaded", () => {
    // Copy IPTV list functionality
    const copyButton = document.getElementById("copyIptvButton");
    if (copyButton) {
      copyButton.addEventListener("click", async () => {
        try {
          await navigator.clipboard.writeText(`${SITE_URL}/m3u`);
          alert("Link a la lista IPTV Copiada al portapapeles");
        } catch (err) {
          console.error("Error copiando texto: ", err);
          alert(`Error copiando url, el url es: ${SITE_URL}/m3u`);
        }
      });
    }

    const xmltvButton = document.getElementById("copyXmltvButton");
    if (xmltvButton) {
      xmltvButton.addEventListener("click", async () => {
        try {
          await navigator.clipboard.writeText(
            `${SITE_URL}/epg/all?format=xmltv`
          );
          alert("Link a la guia XMLTV Copiada al portapapeles");
        } catch (err) {
          console.error("Error copiando texto: ", err);
          alert(
            `Error copiando url, el url es: ${SITE_URL}/epg/all?format=xmltv`
          );
        }
      });
    }

    // Search functionality
    const searchInput = document.getElementById("channelSearch");
    const channelCards = document.querySelectorAll(".channel-card");
    const channelsGrid = document.getElementById("channelsGrid");
    const noResults = document.getElementById("noResults");

    if (searchInput) {
      searchInput.addEventListener("input", (e) => {
        const searchTerm = e.target.value.toLowerCase().trim();
        let visibleCount = 0;

        channelCards.forEach((card) => {
          const channelName = card.getAttribute("data-channel-name") || "";
          const isVisible = channelName.includes(searchTerm);

          card.style.display = isVisible ? "block" : "none";

          if (isVisible) {
            visibleCount++;
          }
        });

        // Show/hide no results message
        if (noResults) {
          noResults.style.display = visibleCount === 0 ? "block" : "none";
        }
      });
    }
  });
</script>
