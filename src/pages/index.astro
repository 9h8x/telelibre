---
export const prerender = false;
import { buttonVariants } from "@/components/ui/button";
import Layout from "../layouts/Layout.astro";
let SITE_URL;
if (import.meta.env.PROD) {
  // Production environment
  const { env } = Astro.locals.runtime;
  SITE_URL = env.SITE_URL;
} else {
  // Development environment
  SITE_URL = import.meta.env.SITE_URL;
}
const request = await fetch(`${SITE_URL}/api/canales`);
const canales = await request.json();
---

<Layout>
  <div class="container mx-auto py-8 px-8">
    <div class="flex flex-col gap-3 mb-6">
      <div class="flex flex-wrap justify-between items-center gap-4">
        <h1 class="text-3xl font-bold">Lista de canales</h1>
        <div class="flex items-center gap-4">
          <span
            class="bg-slate-800 text-white px-3 py-1 rounded-full text-sm font-medium"
          >
            {canales.data.length} canales disponibles
          </span>
          <a href="/informacion">
            <span
              class="bg-slate-800 text-white px-3 py-1 rounded-full text-sm font-medium"
            >
              Información
            </span>
          </a>
        </div>
      </div>

      <!-- Search bar -->
      <div class="w-full max-w-md">
        <div class="relative">
          <input
            type="text"
            id="channelSearch"
            placeholder="Buscar por nombre de canal..."
            class="w-full px-4 py-2 rounded-full border border-slate-300 dark:border-slate-600 bg-white dark:bg-slate-700 text-slate-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-slate-500"
          />
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5 absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400 dark:text-slate-300"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </div>
      </div>

      <!-- Lista IPTV button with fixed text size -->
      <div>
        <button
          id="copyIptvButton"
          type="button"
          class="hover:cursor-pointer bg-slate-800 text-white px-3 py-1 rounded-full text-base font-medium hover:bg-slate-700 transition-colors"
        >
          Lista IPTV
        </button>
      </div>
    </div>

    <!-- Responsive grid layout -->
    <div
      id="channelsGrid"
      class="grid grid-cols-1 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4"
    >
      {
        canales.data.map((channel: any) => (
          <div
            class="channel-card bg-white dark:bg-slate-800 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-200 overflow-hidden"
            data-channel-name={
              channel.titles.ES?.toLowerCase() ||
              channel.titles.EN?.toLowerCase() ||
              ""
            }
          >
            <div class="flex items-center p-4 w-full">
              <div class="flex-shrink-0 mr-4">
                <div class="w-16 h-16 rounded-md overflow-hidden bg-slate-100 dark:bg-slate-700 flex items-center justify-center">
                  <img
                    class="w-full h-full object-contain"
                    src={`${channel.logoUrl}`}
                    alt={
                      channel.titles.ES || channel.titles.EN || "Logo del canal"
                    }
                    loading="lazy"
                  />
                </div>
              </div>

              <div class="flex-grow">
                <div class="flex items-center">
                  <h2 class="text-lg font-medium text-slate-900 dark:text-white">
                    {channel.titles.ES || channel.titles.EN}
                  </h2>
                </div>
              </div>

              <div class="flex-shrink-0 ml-4">
                <a
                  href={`/ver/${channel.number}`}
                  class={`${buttonVariants({ variant: "default" })} text-sm`}
                >
                  Ver Ahora
                </a>
              </div>
            </div>
          </div>
        ))
      }
    </div>

    <!-- No results message -->
    <div
      id="noResults"
      class="hidden text-center py-8 text-slate-600 dark:text-slate-400"
    >
      No se encontraron canales que coincidan con tu búsqueda.
    </div>
  </div>
</Layout>

<script define:vars={{ SITE_URL }}>
  document.addEventListener("DOMContentLoaded", () => {
    // Copy IPTV list functionality
    const copyButton = document.getElementById("copyIptvButton");
    if (copyButton) {
      copyButton.addEventListener("click", async () => {
        try {
          await navigator.clipboard.writeText(`${SITE_URL}/m3u`);
          alert("Link a la lista IPTV Copiada al portapapeles");
        } catch (err) {
          console.error("Error copiando texto: ", err);
          alert(`Error copiando url, el url es: ${SITE_URL}/m3u`);
        }
      });
    }

    // Search functionality
    const searchInput = document.getElementById("channelSearch");
    const channelCards = document.querySelectorAll(".channel-card");
    const channelsGrid = document.getElementById("channelsGrid");
    const noResults = document.getElementById("noResults");

    if (searchInput) {
      searchInput.addEventListener("input", (e) => {
        const searchTerm = e.target.value.toLowerCase().trim();
        let visibleCount = 0;

        channelCards.forEach((card) => {
          const channelName = card.getAttribute("data-channel-name") || "";
          const isVisible = channelName.includes(searchTerm);

          card.style.display = isVisible ? "block" : "none";

          if (isVisible) {
            visibleCount++;
          }
        });

        // Show/hide no results message
        if (noResults) {
          noResults.style.display = visibleCount === 0 ? "block" : "none";
        }
      });
    }
  });
</script>
